var documenterSearchIndex = {"docs":
[{"location":"homework1/#Dokumentacija-za-Domačo-Nalogo-1","page":"Homework 1","title":"Dokumentacija za Domačo Nalogo 1","text":"","category":"section"},{"location":"homework1/#Funkcionalnosti-paketa","page":"Homework 1","title":"Funkcionalnosti paketa","text":"","category":"section"},{"location":"homework1/#Homework1.RedkaMatrika","page":"Homework 1","title":"Homework1.RedkaMatrika","text":"RedkaMatrika{T<:Number}\n\nA custom sparse matrix data type.\n\n\n\n\n\n","category":"type"},{"location":"homework1/#Homework1.sor","page":"Homework 1","title":"Homework1.sor","text":"sor(A, b, x0, omega; tol=1e-10, max_iter=1000) -> (Vector, Int)\n\nSolves the linear system Ax = b using the Successive Over-Relaxation (SOR) iterative method.\n\nArguments\n\nA::RedkaMatrika: The square, sparse matrix of the system.\nb::Vector: The right-hand side vector.\nx0::Vector: The initial guess for the solution.\nomega::Real: The relaxation parameter (typically 0 < omega < 2).\ntol::Real=1e-10: The tolerance for stopping; iteration stops when the infinity norm of the residual is less than tol.\nmax_iter::Int=1000: The maximum number of iterations.\n\nReturns\n\nVector: The computed approximate solution x.\nInt: The number of iterations performed.\n\n\n\n\n\n","category":"function"},{"location":"homework1/#Base.getindex","page":"Homework 1","title":"Base.getindex","text":"getindex(A::RedkaMatrika{T}, i::Int, j::Int) where T\n\nReturns the value of the element at position (i, j). Enables A[i, j] syntax.\n\n\n\n\n\n","category":"function"},{"location":"homework1/#Base.size","page":"Homework 1","title":"Base.size","text":"size(A::RedkaMatrika) -> Tuple{Int, Int}\n\nReturns the dimensions of the sparse matrix as a tuple (n, n).\n\n\n\n\n\n","category":"function"},{"location":"homework1/#Base.setindex!","page":"Homework 1","title":"Base.setindex!","text":"setindex!(A::RedkaMatrika{T}, value::T, i::Int, j::Int) where T\n\nSets the value of the element at position (i, j). Enables A[i, j] = value syntax.\n\n\n\n\n\n","category":"function"},{"location":"homework1/#Base.:*","page":"Homework 1","title":"Base.:*","text":"*(A::RedkaMatrika{T}, v::Vector{T}) where T -> Vector{T}\n\nComputes the product of a sparse matrix A and a vector v.\n\n\n\n\n\n","category":"function"},{"location":"homework1/#Uporaba-metode","page":"Homework 1","title":"Uporaba metode","text":"","category":"section"},{"location":"homework1/","page":"Homework 1","title":"Homework 1","text":"V tem poglavju si bomo pogedali primer uporabe metode sor na problemu vložitvi grafa v ravnino. Nato bomo na primeru poiskali optimalni (\\omega).","category":"page"},{"location":"homework1/#Vložitev-grafa-v-ravnino","page":"Homework 1","title":"Vložitev grafa v ravnino","text":"","category":"section"},{"location":"homework1/","page":"Homework 1","title":"Homework 1","text":"Za demonstracijo uporabe SOR metode smo implementirali algoritem za vložitev grafa v ravnino z uporabo fizikalne metode. Ta metoda modelira graf kot sistem vzmeti, kjer so vozlišča predstavljena kot masne točke, povezave pa kot vzmeti z naravno dolžino nič.","category":"page"},{"location":"homework1/#Matematični-model","page":"Homework 1","title":"Matematični model","text":"","category":"section"},{"location":"homework1/","page":"Homework 1","title":"Homework 1","text":"Fizikalna metoda temelji na minimizaciji energije sistema vzmeti. Za graf G = (V E) z vozlišči V in povezavami E definiramo energijsko funkcijo:","category":"page"},{"location":"homework1/","page":"Homework 1","title":"Homework 1","text":"E = frac12 sum_(ij) in E p_i - p_j^2","category":"page"},{"location":"homework1/","page":"Homework 1","title":"Homework 1","text":"kjer je p_i pozicija vozlišča i v ravnini. Minimum te funkcije dosežemo, ko je za vsako prosto vozlišče i izpolnjen pogoj:","category":"page"},{"location":"homework1/","page":"Homework 1","title":"Homework 1","text":"sum_j in N(i) (p_i - p_j) = 0","category":"page"},{"location":"homework1/","page":"Homework 1","title":"Homework 1","text":"kjer je N(i) množica sosedov vozlišča i. To vodi do sistema linearnih enačb oblike Ax = b, kjer matrika A vsebuje informacije o strukturi grafa.","category":"page"},{"location":"homework1/#Primer:-krožna-lestev","page":"Homework 1","title":"Primer: krožna lestev","text":"","category":"section"},{"location":"homework1/","page":"Homework 1","title":"Homework 1","text":"Kot testni primer smo uporabili krožno lestev z n = 8 vozlišči na vsakem od dveh ciklov. Graf ima skupaj 16 vozlišč, pri čemer so vozlišča prvega cikla (1-8) fiksirana na enotski krožnici, vozlišča drugega cikla (9-16) pa so prosta in jih določimo z optimizacijo.","category":"page"},{"location":"homework1/","page":"Homework 1","title":"Homework 1","text":"(Image: Circular Ladder Graph)","category":"page"},{"location":"homework1/","page":"Homework 1","title":"Homework 1","text":"Rezultat prikazuje simetrično vložitev, kjer so prosta vozlišča razporejena v notranjem krogu, povezana pa so z ustreznimi vozlišči na zunanjem krogu.","category":"page"},{"location":"homework1/#Optimalni-omega","page":"Homework 1","title":"Optimalni omega","text":"","category":"section"},{"location":"homework1/","page":"Homework 1","title":"Homework 1","text":"Parameter omega v SOR metodi določa hitrost konvergence iterativnega postopka. Za optimalno delovanje metode je ključno določiti pravo vrednost tega parametra.","category":"page"},{"location":"homework1/#Teoretično-ozadje","page":"Homework 1","title":"Teoretično ozadje","text":"","category":"section"},{"location":"homework1/","page":"Homework 1","title":"Homework 1","text":"SOR metoda je posplošitev Gauss-Seidlove iteracije z relaksacijskim parametrom omega:","category":"page"},{"location":"homework1/","page":"Homework 1","title":"Homework 1","text":"x_i^(k+1) = (1-omega)x_i^(k) + fracomegaa_iileft(b_i - sum_ji a_ijx_j^(k+1) - sum_ji a_ijx_j^(k)right)","category":"page"},{"location":"homework1/","page":"Homework 1","title":"Homework 1","text":"Za simetrične pozitivno definitne matrike obstaja optimalna vrednost omega_opt, ki minimizira spektralni radij iteracijske matrike.","category":"page"},{"location":"homework1/#Eksperimentalna-analiza","page":"Homework 1","title":"Eksperimentalna analiza","text":"","category":"section"},{"location":"homework1/","page":"Homework 1","title":"Homework 1","text":"Za sistem linearnih enačb iz problema vložitve krožne lestvi smo testirali različne vrednosti parametra omega v intervalu 01 19 in izmerili število iteracij potrebnih za konvergenco.","category":"page"},{"location":"homework1/","page":"Homework 1","title":"Homework 1","text":"(Image: Odvisnost hitrosti konvergence)","category":"page"},{"location":"homework1/","page":"Homework 1","title":"Homework 1","text":"Rezultati kažejo tipično U-obliko krivulje, kjer:","category":"page"},{"location":"homework1/","page":"Homework 1","title":"Homework 1","text":"Pri nizkih vrednostih omega  1 je konvergenca počasna (podrelaksacija)\nOptimalna vrednost omega_opt = 11 zagotavlja najhitrejšo konvergenco\nPri visokih vrednostih omega  15 se hitrost konvergence ponovno zmanjša (nadrelaksacija)","category":"page"},{"location":"homework1/#Rezultati","page":"Homework 1","title":"Rezultati","text":"","category":"section"},{"location":"homework1/","page":"Homework 1","title":"Homework 1","text":"Za obravnavani sistem smo dobili:","category":"page"},{"location":"homework1/","page":"Homework 1","title":"Homework 1","text":"Optimalna vrednost: omega_opt = 11\nMinimalno število iteracij: 23 iteracij","category":"page"},{"location":"homework1/","page":"Homework 1","title":"Homework 1","text":"Ta rezultat je skladen s teoretičnimi pričakovanji za pozitivno definitne sisteme, kjer optimalna vrednost omega običajno leži med 1 in 2. Vrednost omega = 11 kaže na to, da je za ta specifičen problem potrebna le rahla nadrelaksacija za dosego optimalnih rezultatov.","category":"page"},{"location":"homework2/#Dokumentacija-za-Domačo-Nalogo-2","page":"Homework 2","title":"Dokumentacija za Domačo Nalogo 2","text":"","category":"section"},{"location":"homework2/#Funkcionalnosti-paketa","page":"Homework 2","title":"Funkcionalnosti paketa","text":"","category":"section"},{"location":"homework2/#Homework2.de_casteljau","page":"Homework 2","title":"Homework2.de_casteljau","text":"de_casteljau(points::Vector{Float64}, t::Float64) -> Float64\n\nEvaluates a 1D Bézier curve at parameter t using de Casteljau's algorithm.\n\nArguments\n\npoints: A vector of control point coordinates (e.g., all x-coordinates).\nt: The parameter value, typically in [0, 1].\n\nReturns\n\nThe value of the curve at t.\n\n\n\n\n\n","category":"function"},{"location":"homework2/#Homework2.calculate_bezier_loop_area","page":"Homework 2","title":"Homework2.calculate_bezier_loop_area","text":"calculate_bezier_loop_area(control_points::Vector{NTuple{2,Float64},t_start::Float64 = 0.0,t_end::Float64 = 1.0}) -> Float64\n\nCalculates the signed area of a loop for a Bézier curve using Green's theorem.\n\nArguments\n\ncontrol_points: A vector of 2D tuples (x, y) representing the control polygon.\nt_start: Start parameter (t-value) for integration. Default is 0.0.\nt_end: Končni parameter (t-vrednost) za integracijo. Default is 1.0.\n\nReturns\n\nThe signed area of the curve's loop.\n\n\n\n\n\n","category":"function"},{"location":"homework2/#Homework2.calculate_bezier_loop_area_auto_detect","page":"Homework 2","title":"Homework2.calculate_bezier_loop_area_auto_detect","text":"calculate_bezier_loop_area_auto_detect(control_points::Vector{NTuple{2,Float64}}; kwargs...)\n\nFinds the self-intersection of a Bézier curve and calculates the area of the loop. This function first calls find_bezier_self_intersection to determine the intersection parameters t_start and t_end.\n\nArguments\n\ncontrol_points: A vector of (x, y) tuples representing the control points.\n...: Keyword arguments to be passed to find_bezier_self_intersection.\n\nReturns\n\nThe area of the Bézier curve loop.\n\n\n\n\n\n","category":"function"},{"location":"homework2/#Homework2.find_bezier_self_intersection","page":"Homework 2","title":"Homework2.find_bezier_self_intersection","text":"find_bezier_self_intersection(control_points::Vector{NTuple{2,Float64}}; kwargs...) -> Tuple{Float64, Float64}\n\nFinds the self-intersection parameters (tstart, tend) of a Bézier curve. This uses a two-phase approach: a coarse search to find an initial guess, then refines it with Newton's method for solving systems of nonlinear equations.\n\nArguments\n\ncontrol_points: A vector of (x, y) tuples representing the control points.\nnum_samples_coarse::Int=1000: Number of samples for the initial coarse search.\nmax_newton_iter::Int=20: Maximum number of iterations for Newton's method.\ntolerance::Float64=1e-12: The convergence tolerance for Newton's method (based on the norm of the step).\nlogging::Bool=true: A boolean to enable or disable logging output.\n\nReturns\n\nA sorted tuple (t_start, t_end) representing the parameter values at the point of self-intersection.\n\nThrows\n\nArgumentError: If no plausible self-intersection is found in the coarse search.\nArgumentError: If Newton's method fails to converge or if the Jacobian matrix becomes singular.\n\n\n\n\n\n","category":"function"},{"location":"homework2/#Homework2.bezier_loop_integrand","page":"Homework 2","title":"Homework2.bezier_loop_integrand","text":"bezier_loop_integrand(t::Float64, px::Vector{Float64}, py::Vector{Float64}, d_px::Vector{Float64}, d_py::Vector{Float64}) -> Float64\n\nCalculates the value of the integrand used to compute the area of a Bézier curve's loop at a given parameter t.\n\nThe area of a closed loop can be computed using Green's Theorem, where the integrand is given by (x(t)y'(t) - x'(t)y(t)).\n\nArguments\n\nt: The parameter on the curve (typically between 0.0 and 1.0).\npx: The x-coordinates of the control points for the original Bézier curve.\npy: The y-coordinates of the control points for the original Bézier curve.\nd_px: The x-coordinates of the control points for the derivative Bézier curve (representing (x'(t))).\nd_py: The y-coordinates of the control points for the derivative Bézier curve (representing (y'(t))).\n\nReturns\n\nThe value of the integrand (x(t)y'(t) - x'(t)y(t)) at the given t.\n\n\n\n\n\n","category":"function"},{"location":"homework2/#Homework2.integrate_gl_20","page":"Homework 2","title":"Homework2.integrate_gl_20","text":"integrate_gl_20(f::Function, a::Float64, b::Float64) -> Float64\n\nCalculates the definite integral of a function f over the interval [a, b] using 20-point Gauss-Legendre quadrature.\n\nArguments\n\nf: The function to integrate. It should accept a single Float64 argument.\na: The lower bound of integration.\nb: The upper bound of integration.\n\nReturns\n\nThe approximate value of the definite integral.\n\n\n\n\n\n","category":"function"},{"location":"homework2/#Homework2.evaluate_bezier_2D","page":"Homework 2","title":"Homework2.evaluate_bezier_2D","text":"evaluate_bezier(control_points::Vector{NTuple{2,Float64}}, t::Float64)\n\nEvaluates a 2D Bézier curve at parameter t using de Casteljau's algorithm.\n\nArguments\n\ncontrol_points: A vector of control point coordinates (e.g., all x-coordinates).\nt: The parameter value, typically in [0, 1].\n\nReturns\n\nThe value (x,y) of the curve at t.\n\n\n\n\n\n","category":"function"},{"location":"homework2/#Homework2.derivative_control_points","page":"Homework 2","title":"Homework2.derivative_control_points","text":"derivative_control_points(points::Vector{NTuple{2, Float64}})\n\nCalculates the control points for the derivative of a Bézier curve.\n\nThe derivative of a degree (n) Bézier curve is a Bézier curve of degree (n-1). This function computes the control points for that derivative curve.\n\nArguments\n\npoints: A vector of 2D tuples representing the control points of the original curve.\n\nReturns\n\nA new vector of control points for the derivative curve.\n\n\n\n\n\n","category":"function"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"","category":"page"},{"location":"homework2/#1-Algoritem-de-Casteljau","page":"Homework 2","title":"1   Algoritem de Casteljau","text":"","category":"section"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"Algoritem de Casteljau je stabilen in numerično robusten postopek za evalvacijo (in razbitje) Bézierjeve krivulje stopnje n.","category":"page"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"Bézierova krivulja je podana parametriično s formulo:","category":"page"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"mathbfB(t)=sum_i=0^nn choose i(1-t)^n-it^imathbfP_iqquad tin01","category":"page"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"kjer so mathbfP_i kontrolne točke.","category":"page"},{"location":"homework2/#1.1-Rekurzivna-interpolacija","page":"Homework 2","title":"1.1   Rekurzivna interpolacija","text":"","category":"section"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"Algoritem temelji na ponavljajoči se linearni interpolaciji med zaporednimi točkami:","category":"page"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"mathbfP^(k)_i(t)=(1-t)mathbfP^(k-1)_i(t)+tmathbfP^(k-1)_i+1(t)quad k=1dots n","category":"page"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"pri čemer mathbfP^(0)_i=mathbfP_i.   Po n korakih ostane ena sama točka mathbfP^(n)_0(t)=mathbfB(t).","category":"page"},{"location":"homework2/#1.2-Implementacija","page":"Homework 2","title":"1.2   Implementacija","text":"","category":"section"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"V funkciji de_casteljau(points, t) se:","category":"page"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"Kopira vhodni vektor koeficientov (1D projekcija),\nizvede zgornja interpolacija v dveh gnezdenih zankah,\nVrne položaj Bézierove krivulje B(t) v t.","category":"page"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"Zahvaljujoč zgolj seštevanju in množenju z realnimi števili je algoritem brez problemov z nestabilnostjo, ki pestijo direktno evalvacijo Bernstein-ove vsote za večje n.","category":"page"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"","category":"page"},{"location":"homework2/#2-Ploščina-zaprtih-Bézierjevih-zank","page":"Homework 2","title":"2   Ploščina zaprtih Bézierjevih zank","text":"","category":"section"},{"location":"homework2/#2.1-Greenova-formula","page":"Homework 2","title":"2.1 Greenova formula","text":"","category":"section"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"Naj bo mathbfr(t)=(x(t)y(t)) gladka, zaprta krivulja z tin01.   Greenova formula poda ploščino","category":"page"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"A=frac12oint_mathbfrbigl(xdy-ydxbigr)=frac12int_0^1biglx(t)y(t)-x(t)y(t)bigrdt","category":"page"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"Za Bézierjevo krivuljo dobimo polinom stopnje n-1. Integral torej lahko izračunamo eksaktno z Gauss–Legendrejevo kvadraturo. V nalogi uporabimo 20-točkovno kvadraturo, ki omogoča zadostno natančnost.","category":"page"},{"location":"homework2/#2.2-Koraki-funkcije-calculate_bezier_loop_area","page":"Homework 2","title":"2.2   Koraki funkcije calculate_bezier_loop_area","text":"","category":"section"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"Ločimo koordinate kontrolnih točk v vektorja px, py:   Bézierova krivulja je parametrična krivulja, kjer vsaka točka (x(t) y(t)) izhaja iz ločenih Bernstein-ovih polinomov za x in y koordinate. Zato moramo kontrolne točke ločiti v dva vektorja za neodvisno evalvacijo.\nIzračunamo kontrolne točke odvodov x(t) in y(t):   Odvod Bézierove krivulje stopnje n je Bézierova krivulja stopnje n-1 s kontrolnimi točkami: mathbfP_i=nbigl(mathbfP_i+1-mathbfP_ibigr) To izhaja iz odvoda Bernstein-ovih polinomov (vir).\nPreslikava vozlišč Gauss-Legendre kvadrature:   Standardna Gauss-Legendre kvadratura je definirana na intervalu -1 1. Za integracijo na intervalu a b uporabimo linearno preslikavo: t = fracb-a2xi + fraca+b2 kjer je xi in -1 1 standardno vozlišče. V našem primeru je a = t_start in b = t_end.\nEvalvacija integranda:   Za vsako preslikano vozlišče t_k ovrednotimo integrand: f(t_k) = x(t_k)y(t_k) - x(t_k)y(t_k) z uporabo de_casteljau algoritma.\nKončni izračun:   Seštejemo w_k f(t_k) (kjer so w_k uteži kvadrature) in pomnožimo s skalacijskim faktorjem fracb-a2 ter z frac12 iz Greenove formule.","category":"page"},{"location":"homework2/#2.3-Avtomatska-detekcija-zanke-in-izračun-ploščine","page":"Homework 2","title":"2.3   Avtomatska detekcija zanke in izračun ploščine","text":"","category":"section"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"Funkcija calculate_bezier_loop_area_auto_detect samodejno najde točko samopresečišča Bézierjeve krivulje in izračuna ploščino nastale zanke. Postopek poteka v dveh fazah:","category":"page"},{"location":"homework2/#2.3.1-Grobo-iskanje-samopresečišča","page":"Homework 2","title":"2.3.1   Grobo iskanje samopresečišča","text":"","category":"section"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"Vzorčenje krivulje: Krivuljo vzorčimo z 1000 enakomerno razporejenimi točkami na intervalu 0 1.\nIskanje najbližjih točk: Poiščemo par točk (t_1 t_2) z minimalno razdaljo, kjer je t_1 - t_2  01 (da ne primerjamo sosednjih točk).\nPreverjanje: Če ni najdenega para, funkcija vrže izjemo (krivulja nima samopresečišča).","category":"page"},{"location":"homework2/#2.3.2-Natančno-iskanje-z-Newtonovo-metodo","page":"Homework 2","title":"2.3.2   Natančno iskanje z Newtonovo metodo","text":"","category":"section"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"Začetni približek: Uporabimo (t_1 t_2) iz grobe faze kot začetni približek.\nNewtonova metoda: Rešujemo sistem dveh nelinearnih enačb B(t_1) = B(t_2), kjer B je Bézierjeva krivulja. V vsaki iteraciji izračunamo razliko in Jacobijevo matriko ter posodobimo (t_1 t_2).\nKonvergenca: Postopek se ustavi, ko je norma koraka manjša od tolerance (privzeto 10^-12) ali ko presežemo maksimalno število iteracij (privzeto 20).\nIzjeme: Če Jacobijeva matrika postane singularna ali metoda ne konvergira, funkcija vrže izjemo.","category":"page"},{"location":"homework2/#2.3.3-Izračun-ploščine-zanke","page":"Homework 2","title":"2.3.3   Izračun ploščine zanke","text":"","category":"section"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"Ko imamo točki samopresečišča (t_start t_end), izračunamo ploščino zanke z integracijo Greenove formule na intervalu t_start t_end: A = frac12int_t_start^t_end biglx(t)y(t) - x(t)y(t)bigr dt","category":"page"},{"location":"homework2/#3-Konkreten-primer-uporabe","page":"Homework 2","title":"3   Konkreten primer uporabe","text":"","category":"section"},{"location":"homework2/#3.1-Opis-primera","page":"Homework 2","title":"3.1   Opis primera","text":"","category":"section"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"Razmislimo o Bézierjevi krivulji stopnje 7, definirani z naslednjimi kontrolnimi točkami:","category":"page"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"CONTROL_POLYGON = [\n  ( 0.0, 0.0),  # P₀ - začetna točka\n  ( 1.0, 1.0),  # P₁\n  ( 2.0, 3.0),  # P₂\n  ( 1.0, 4.0),  # P₃\n  ( 0.0, 4.0),  # P₄\n  (-1.0, 3.0),  # P₅\n  ( 0.0, 1.0),  # P₆\n  ( 1.0, 0.0)   # P₇ - končna točka\n]","category":"page"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"Ta kontrolni poligon definira krivuljo, ki se sama sebe preseka in tvori zanko. Na sliki spodaj je prikazana Bézierova krivulja (modra črta) z označenimi kontrolnimi točkami (rdeče točke) in kontrolnim poligonom (črtkana črta).","category":"page"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"(Image: Bézierova krivulja z kontrolnimi točkami)","category":"page"},{"location":"homework2/#3.2-Avtomatska-detekcija-samopresečišča","page":"Homework 2","title":"3.2   Avtomatska detekcija samopresečišča","text":"","category":"section"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"Ko pokličemo funkcijo calculate_bezier_loop_area_auto_detect, algoritem:","category":"page"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"Najde samopresečišče: Algoritem je uspešno zaznal točko samopresečišča pri koordinatah (05 0616)\nDoloči parametre: Najdeni parametri so t_1 = 0075 in t_2 = 0925\nIzračuna ploščino: Ploščina zanke je A = 2254 kvadratnih enot","category":"page"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"area = calculate_bezier_loop_area_auto_detect(CONTROL_POLYGON)\n# Izpis algoritma:\n# Coarse search found initial guess: t1 ≈ 0.07507507507507508, t2 ≈ 0.924924924924925\n# Newton's method converged in 3 iterations.\n# Detected intersection point: (0.4999999999999998, 0.61629577928722)\n# Final parameters: t1 = 0.0750643505886663, t2 = 0.9249356494113337\n#\n# --------------------\n# Calculated area: 2.253709530172552\n# --------------------","category":"page"},{"location":"homework2/#3.3-Geometrijska-interpretacija","page":"Homework 2","title":"3.3   Geometrijska interpretacija","text":"","category":"section"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"Na sliki lahko vidimo, da:","category":"page"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"Kontrolni poligon (črtkana črta) povezuje kontrolne točke P_0 do P_7\nBézierova krivulja (modra črta) se gladko prilega kontrolnemu poligonu\nSamopresečišče se nahaja približno na koordinatah (05 0616), kar se ujema z rezultatom algoritma\nZanka je območje, ki ga omejuje krivulja med parametroma t_1 = 0075 in t_2 = 0925","category":"page"},{"location":"homework2/","page":"Homework 2","title":"Homework 2","text":"Algoritem je uspešno zaznal, da se krivulja sama sebe preseka pri parametru t approx 0075 in ponovno pri t approx 0925, kar ustvarja zaprto zanko s ploščino 2254 kvadratnih enot.","category":"page"},{"location":"#Dokumentacija-za-Domačo-Nalogo","page":"Overview","title":"Dokumentacija za Domačo Nalogo","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"Dobrodošli v dokumentaciji za paket, ki je bil razvit v sklopu domače naloge. Ta paket ponuja orodja za delo z redkimi matrikami, vključno z implementacijo reševalca SOR in metod za vlaganje grafov.","category":"page"}]
}
